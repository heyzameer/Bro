### **Breakpoints in Bootstrap**  
Bootstrap uses **responsive breakpoints** to adjust the layout based on different screen sizes. These breakpoints are based on **minimum width media queries**, meaning styles apply at the given breakpoint and **up**.

---

### **Bootstrap Breakpoints Table**
| Breakpoint | Class Prefix | Screen Size (px) | Devices |
|------------|-------------|------------------|----------|
| **Extra Small (XS)** | `col-` | `<576px` | Mobile (default, no prefix) |
| **Small (SM)** | `col-sm-` | `‚â•576px` | Mobile (larger screens) |
| **Medium (MD)** | `col-md-` | `‚â•768px` | Tablets |
| **Large (LG)** | `col-lg-` | `‚â•992px` | Desktops |
| **Extra Large (XL)** | `col-xl-` | `‚â•1200px` | Large Desktops |
| **XXL (XXL)** | `col-xxl-` | `‚â•1400px` | Extra Large Screens |

---

### **How to Use Breakpoints in Bootstrap?**
#### ‚úÖ **Example 1: Responsive Columns**
```html
<div class="row">
    <div class="col-12 col-sm-6 col-md-4 col-lg-3 bg-primary text-white p-3">Column 1</div>
    <div class="col-12 col-sm-6 col-md-4 col-lg-3 bg-secondary text-white p-3">Column 2</div>
    <div class="col-12 col-sm-6 col-md-4 col-lg-3 bg-success text-white p-3">Column 3</div>
    <div class="col-12 col-sm-6 col-md-4 col-lg-3 bg-danger text-white p-3">Column 4</div>
</div>
```
### **How it Works?**
- **On Extra Small (`<576px`)** ‚Üí Each column takes `100%` width (`col-12`).
- **On Small (`‚â•576px`)** ‚Üí Each row has 2 columns (`col-sm-6`).
- **On Medium (`‚â•768px`)** ‚Üí Each row has 3 columns (`col-md-4`).
- **On Large (`‚â•992px`)** ‚Üí Each row has 4 columns (`col-lg-3`).

---

### ‚úÖ **Example 2: Responsive Visibility**
Bootstrap also allows hiding or showing elements based on breakpoints.

```html
<div class="d-block d-sm-none bg-warning p-3">Visible only on Extra Small screens</div>
<div class="d-none d-sm-block d-md-none bg-info p-3">Visible only on Small screens</div>
<div class="d-none d-md-block d-lg-none bg-success p-3">Visible only on Medium screens</div>
<div class="d-none d-lg-block d-xl-none bg-primary p-3">Visible only on Large screens</div>
<div class="d-none d-xl-block bg-danger p-3">Visible only on Extra Large screens</div>
```

---

### ‚úÖ **Example 3: Responsive Margin & Padding**
You can also use breakpoints for spacing (`m-`, `p-`) classes:

```html
<div class="p-1 p-md-3 p-lg-5 bg-light border">Padding changes at breakpoints</div>
```
- **`p-1`** ‚Üí Small padding for mobile  
- **`p-md-3`** ‚Üí Larger padding for tablets  
- **`p-lg-5`** ‚Üí Even larger padding for desktops  

---

### **Key Takeaways**
‚úÖ Bootstrap has **6 breakpoints** (`xs`, `sm`, `md`, `lg`, `xl`, `xxl`).  
‚úÖ Use `col-*`, `d-*`, `m-*`, and `p-*` classes for responsive design.  
‚úÖ **Mobile-first approach** ‚Üí Styles apply **upwards** from the specified breakpoint.  

Would you like a specific use case? üöÄ





















### **Bootstrap `.container` Class Explained**  
In Bootstrap, the `.container` class is used to wrap and center content while providing responsive padding and margins.

---

### **Types of Containers in Bootstrap**
There are **three** main container classes in Bootstrap:

| Class | Behavior | Width (px) |
|--------|--------------------------------|------------------------------|
| `.container` | **Fixed-width container** that adjusts at breakpoints | `540px`, `720px`, `960px`, `1140px`, `1320px` |
| `.container-fluid` | **Full-width container** (100% of screen width) | Always `100%` |
| `.container-{breakpoint}` | **Responsive container** (expands up to the given breakpoint, then stops) | Varies |

---

### **1Ô∏è‚É£ `.container` (Fixed Width)**
- Centers the content and sets a **maximum width** at different breakpoints.
- Width **changes** at specific screen sizes.

```html
<div class="container bg-light border p-3">
    This is a fixed-width container.
</div>
```

#### **Fixed Widths at Breakpoints:**
| Breakpoint | Width |
|------------|--------|
| `<576px` (XS) | `100%` |
| `‚â•576px` (SM) | `540px` |
| `‚â•768px` (MD) | `720px` |
| `‚â•992px` (LG) | `960px` |
| `‚â•1200px` (XL) | `1140px` |
| `‚â•1400px` (XXL) | `1320px` |

---

### **2Ô∏è‚É£ `.container-fluid` (Full Width)**
- Stretches **100% of the viewport width**.
- Does **not** have a maximum width.

```html
<div class="container-fluid bg-primary text-white p-3">
    This is a full-width container.
</div>
```

---

### **3Ô∏è‚É£ `.container-{breakpoint}` (Responsive Container)**
- Expands to **100%** until the specified **breakpoint**, then behaves like `.container`.

```html
<div class="container-md bg-secondary text-white p-3">
    This container is full width until "md" (‚â•768px), then it's fixed.
</div>
```

#### **How It Works?**
| Class | Expands Full Width Until | Then Behaves Like `.container` |
|--------|----------------|----------------|
| `.container-sm` | `<576px` | `‚â•576px` |
| `.container-md` | `<768px` | `‚â•768px` |
| `.container-lg` | `<992px` | `‚â•992px` |
| `.container-xl` | `<1200px` | `‚â•1200px` |
| `.container-xxl` | `<1400px` | `‚â•1400px` |

---

### **Example: Using Different Containers**
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Bootstrap Containers</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>

<div class="container bg-light border p-3">
    Fixed-width container (adjusts at breakpoints).
</div>

<div class="container-fluid bg-primary text-white p-3 mt-3">
    Full-width container (always 100%).
</div>

<div class="container-md bg-secondary text-white p-3 mt-3">
    Full width until "md" breakpoint, then fixed.
</div>

</body>
</html>
```

---

### **Key Takeaways**
‚úÖ `.container` ‚Üí Fixed width (adjusts at breakpoints).  
‚úÖ `.container-fluid` ‚Üí Always **100% width**.  
‚úÖ `.container-{breakpoint}` ‚Üí Full width **until** breakpoint, then fixed.  

Would you like to see a specific layout example? üöÄ















This table clearly shows how Bootstrap's different `.container` classes behave across breakpoints. Here's a breakdown:

---

### **Bootstrap Container Widths at Different Breakpoints**
| Breakpoint | **Extra Small** `<576px` | **Small** `‚â•576px` | **Medium** `‚â•768px` | **Large** `‚â•992px` | **X-Large** `‚â•1200px` | **XX-Large** `‚â•1400px` |
|------------|----------------|------------|------------|------------|------------|------------|
| `.container` | `100%` | `540px` | `720px` | `960px` | `1140px` | `1320px` |
| `.container-sm` | `100%` | `540px` | `720px` | `960px` | `1140px` | `1320px` |
| `.container-md` | `100%` | `100%` | `720px` | `960px` | `1140px` | `1320px` |
| `.container-lg` | `100%` | `100%` | `100%` | `960px` | `1140px` | `1320px` |
| `.container-xl` | `100%` | `100%` | `100%` | `100%` | `1140px` | `1320px` |
| `.container-xxl` | `100%` | `100%` | `100%` | `100%` | `100%` | `1320px` |
| `.container-fluid` | `100%` | `100%` | `100%` | `100%` | `100%` | `100%` |

---

### **How It Works?**
- **`.container`** ‚Üí Fixed width at breakpoints, starts at `100%` for small screens.
- **`.container-sm`** ‚Üí Fixed width **starting from** the `sm` (`‚â•576px`) breakpoint.
- **`.container-md`** ‚Üí Full width **until** `md` (`‚â•768px`), then fixed.
- **`.container-lg`** ‚Üí Full width **until** `lg` (`‚â•992px`), then fixed.
- **`.container-xl`** ‚Üí Full width **until** `xl` (`‚â•1200px`), then fixed.
- **`.container-xxl`** ‚Üí Full width **until** `xxl` (`‚â•1400px`), then fixed.
- **`.container-fluid`** ‚Üí Always `100%` width at all breakpoints.

---

### **Key Takeaways**
‚úÖ **`.container-fluid`** is always `100%` width.  
‚úÖ **`.container`** has a **maximum width** at each breakpoint.  
‚úÖ **`.container-{breakpoint}`** becomes **fixed-width after reaching that breakpoint**.  

Would you like a visual example with Bootstrap grid columns? üöÄ























In Bootstrap, you can divide columns using the **grid system**. Bootstrap's grid system is based on a **12-column layout**, which means you can split a row into up to 12 columns.

### Basic Column Division:
```html
<div class="container">
    <div class="row">
        <div class="col-md-6 bg-primary text-white">50% Width</div>
        <div class="col-md-6 bg-secondary text-white">50% Width</div>
    </div>
</div>
```
Here:
- `col-md-6` means each column takes **6 out of 12** parts (i.e., 50% width).
- `row` ensures columns stay in a row.
- `container` provides padding and alignment.

### Three Equal Columns:
```html
<div class="container">
    <div class="row">
        <div class="col-md-4 bg-success text-white">Column 1</div>
        <div class="col-md-4 bg-danger text-white">Column 2</div>
        <div class="col-md-4 bg-info text-white">Column 3</div>
    </div>
</div>
```

### Unequal Column Widths:
```html
<div class="container">
    <div class="row">
        <div class="col-md-8 bg-warning text-dark">8/12 Width</div>
        <div class="col-md-4 bg-dark text-white">4/12 Width</div>
    </div>
</div>
```


### Auto-Sizing Columns:
```html
<div class="container">
    <div class="row">
        <div class="col bg-light border">Auto Width 1</div>
        <div class="col bg-light border">Auto Width 2</div>
    </div>
</div>
```
- Here, `col` automatically distributes equal width among columns.

Would you like more examples or explanations? üöÄ























### **`row-cols` in Bootstrap**
The `row-cols` class in Bootstrap is used to automatically distribute columns evenly **without manually specifying the column width** (`col-*`). It ensures responsive and consistent layouts across different screen sizes.

---

### **Basic Usage: Equal Columns**
```html
<div class="container">
    <div class="row row-cols-3">
        <div class="col bg-primary text-white p-3">Column 1</div>
        <div class="col bg-secondary text-white p-3">Column 2</div>
        <div class="col bg-success text-white p-3">Column 3</div>
        <div class="col bg-danger text-white p-3">Column 4</div>
        <div class="col bg-warning text-dark p-3">Column 5</div>
        <div class="col bg-info text-white p-3">Column 6</div>
    </div>
</div>
```
**Explanation:**
- `row-cols-3` automatically divides the row into **3 equal columns per row**.
- No need to manually set `col-md-4`, Bootstrap takes care of the layout.

---

### **Responsive `row-cols` Example**
```html
<div class="container">
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4">
        <div class="col bg-light border p-3">Item 1</div>
        <div class="col bg-light border p-3">Item 2</div>
        <div class="col bg-light border p-3">Item 3</div>
        <div class="col bg-light border p-3">Item 4</div>
        <div class="col bg-light border p-3">Item 5</div>
        <div class="col bg-light border p-3">Item 6</div>
    </div>
</div>
```
**Breakpoints:**
- `row-cols-1`: 1 column on **extra small** screens.
- `row-cols-sm-2`: 2 columns on **small** screens (‚â•576px).
- `row-cols-md-3`: 3 columns on **medium** screens (‚â•768px).
- `row-cols-lg-4`: 4 columns on **large** screens (‚â•992px).

---

### **Use Case: Card Layout**
```html
<div class="container">
    <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 g-3">
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Card 1</h5>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Card 2</h5>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Card 3</h5>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Card 4</h5>
                </div>
            </div>
        </div>
    </div>
</div>
```
- **`row-cols-2 row-cols-md-3 row-cols-lg-4`** adjusts the number of columns based on screen size.
- **`g-3`** adds spacing (gap) between the cards.

---

### **When to Use `row-cols`?**
‚úÖ When you want **equal-width columns** without manually specifying `col-*` classes.  
‚úÖ When the number of columns should **adjust dynamically** based on screen size.  
‚úÖ When using **cards or grids** where items should be evenly distributed.

Would you like more examples? üöÄ










in every screen
col takes 12px padding form left and right

and row takees -12 px mrgin from left and right












### **`gutter` Classes in Bootstrap Grid System (`g-*`)**
In Bootstrap, **gutters** control the spacing between columns. You can use the `g-*` classes to adjust the **horizontal (`gx-*`)** and **vertical (`gy-*`)** spacing between columns in a `row`.

---

## **1Ô∏è‚É£ Default Gutters (Without `g-*` Classes)**
By default, Bootstrap adds some space between columns. However, you can customize or remove them using `g-*` classes.

---

## **2Ô∏è‚É£ Add Gutters (`g-*`) for Equal Spacing**
```html
<div class="container">
    <div class="row row-cols-3 g-3">
        <div class="col bg-primary text-white p-3">Column 1</div>
        <div class="col bg-secondary text-white p-3">Column 2</div>
        <div class="col bg-success text-white p-3">Column 3</div>
        <div class="col bg-danger text-white p-3">Column 4</div>
        <div class="col bg-warning text-dark p-3">Column 5</div>
        <div class="col bg-info text-white p-3">Column 6</div>
    </div>
</div>
```
### **Explanation:**
- `g-3` adds **equal spacing** (gutter) **both horizontally and vertically**.
- This ensures consistent spacing between columns.

---

## **3Ô∏è‚É£ Separate Horizontal (`gx-*`) and Vertical (`gy-*`) Gutters**
```html
<div class="container">
    <div class="row row-cols-2 gx-5 gy-3">
        <div class="col bg-light border p-3">Column 1</div>
        <div class="col bg-light border p-3">Column 2</div>
        <div class="col bg-light border p-3">Column 3</div>
        <div class="col bg-light border p-3">Column 4</div>
    </div>
</div>
```
### **Explanation:**
- `gx-5` increases **horizontal** spacing (column gap).
- `gy-3` increases **vertical** spacing (row gap).

---

## **4Ô∏è‚É£ Remove Gutters (`g-0`)**
If you want **no spacing** between columns, use `g-0`:
```html
<div class="container">
    <div class="row row-cols-2 g-0">
        <div class="col bg-primary text-white p-3">Column 1</div>
        <div class="col bg-secondary text-white p-3">Column 2</div>
        <div class="col bg-success text-white p-3">Column 3</div>
        <div class="col bg-danger text-white p-3">Column 4</div>
    </div>
</div>
```
### **Explanation:**
- `g-0` **removes all spacing** between columns, making them **touch each other**.

---

## **5Ô∏è‚É£ Responsive Gutters**
You can also control gutters based on screen sizes:
```html
<div class="container">
    <div class="row row-cols-2 g-1 g-md-4 g-lg-5">
        <div class="col bg-light border p-3">Item 1</div>
        <div class="col bg-light border p-3">Item 2</div>
        <div class="col bg-light border p-3">Item 3</div>
        <div class="col bg-light border p-3">Item 4</div>
    </div>
</div>
```
### **Explanation:**
- `g-1` (smallest gap for extra-small screens).
- `g-md-4` (larger gap for medium screens and above).
- `g-lg-5` (even larger gap for large screens and above).

---

### **üìå Summary of `gutter` Classes**
| Class | Description |
|-------|------------|
| `g-0` | No gutter (no spacing between columns). |
| `g-1` to `g-5` | Sets equal spacing between columns (both horizontal & vertical). |
| `gx-0` to `gx-5` | Controls **horizontal** spacing between columns. |
| `gy-0` to `gy-5` | Controls **vertical** spacing between rows. |
| `g-md-*`, `g-lg-*` | Adjusts spacing based on screen size (responsive). |

Would you like any modifications or more examples? üöÄ






















### **üìå Bootstrap Spacing (`g-*`, `p-*`, `m-*`) Summary**  

#### **1Ô∏è‚É£ Gutters (`g-*`): Controls space between columns in a grid.**  
| Class  | rem  | px  |
|--------|------|----|
| `g-0`  | `0rem`  | `0px` |
| `g-1`  | `0.25rem` | `4px` |
| `g-2`  | `0.5rem`  | `8px` |
| `g-3`  | `1rem`  | `16px` |
| `g-4`  | `1.5rem` | `24px` |
| `g-5`  | `3rem`  | `48px` |

‚úÖ **Usage:**  
```html
<div class="row g-3">
  <div class="col">Column 1</div>
  <div class="col">Column 2</div>
</div>
```

---

#### **2Ô∏è‚É£ Padding (`p-*`): Controls space inside an element.**  
| Class  | rem  | px  |
|--------|------|----|
| `p-0`  | `0rem`  | `0px` |
| `p-1`  | `0.25rem` | `4px` |
| `p-2`  | `0.5rem`  | `8px` |
| `p-3`  | `1rem`  | `16px` |
| `p-4`  | `1.5rem` | `24px` |
| `p-5`  | `3rem`  | `48px` |

‚úÖ **Variations:**  
- `pt-*` (top)  
- `pb-*` (bottom)  
- `pl-*` (left)  
- `pr-*` (right)  
- `px-*` (left & right)  
- `py-*` (top & bottom)  

üîπ **Example:**  
```html
<div class="p-3">Padded Box</div>
<div class="px-4 py-2">Horizontal & Vertical Padding</div>
```

---

#### **3Ô∏è‚É£ Margin (`m-*`): Controls space outside an element.**  
| Class  | rem  | px  |
|--------|------|----|
| `m-0`  | `0rem`  | `0px` |
| `m-1`  | `0.25rem` | `4px` |
| `m-2`  | `0.5rem`  | `8px` |
| `m-3`  | `1rem`  | `16px` |
| `m-4`  | `1.5rem` | `24px` |
| `m-5`  | `3rem`  | `48px` |

‚úÖ **Variations:**  
- `mt-*` (top)  
- `mb-*` (bottom)  
- `ml-*` (left)  
- `mr-*` (right)  
- `mx-*` (left & right)  
- `my-*` (top & bottom)  
- `m-auto` (auto margin for centering)  

üîπ **Example:**  
```html
<div class="m-3">Margin Box</div>
<div class="mx-auto">Centered Div</div>
```

---

### **üìå Quick Formula:**  
‚úÖ **Spacing (g, p, m) = `0.25rem √ó value`**  
‚úÖ **1 rem = 16px**  
‚úÖ **For negative margin: `m-n*`**

üöÄ Need specific examples or custom spacing? Let me know!













responsive img
img-fluid

      <div class="row align-items-center">
                <div class="col-sm-6">
                    <img src="https://uptownskylla.in/wp-content/uploads/2022/09/01-1-1024x748.jpg" alt="" class="img-fluid">
                </div>
                <div class="col-lg-6 lh-base">
                    <h1 class="text-danger">About Uptown Skylla -Zirakpur</h1>
                    <p>Redefining the standards of elegant living with meticulously planned apartments or flats in Zirakpur that are crafted with sophisticated taste, Uptown Skylla Zirakpur has outdone its residential stature with impeccable premium Flats. Available in configurations of 2, 3, 3+S, 4+S BHK luxurious Flats and Pent houses in Zirakpur , these upscale homes are truly a dream come true for young couples and growing families. One of the many great features of the Uptown Skylla flats in Zirakpur is its enviable location and excellent connectivity to the rest of the city. The location have been strategically chosen to offer close proximity to modern lifestyle conveniences, ample green spaces as well as a picturesque view. Another perk of living in a Uptown Skylla apartments is that you will never run out of things to do.</p>
                    <p>From amenities such as landscaped gardens, swimming pool, gym, indoor games and clubhouse to advanced security systems and promoting community living, make the perfect choice to buy an apartment in Zirakpur at Uptown Skylla luxury flats. Each apartment has been carefully designed to maximize the utilization of space, along with the use of best in choice fittings, tiles and other specifications. This attention to detail promises an ultra luxurious life for all members of the family.</p>
                </div>
            </div>
            \















            ### **üìå `display: flex` in Bootstrap (`d-flex` & Properties)**  

Bootstrap provides **Flexbox utilities** to quickly apply `display: flex` and manage layouts efficiently.

---

## **1Ô∏è‚É£ Enable Flexbox (`d-flex`)**
Use `d-flex` to apply **`display: flex;`** on an element.  
```html
<div class="d-flex">
  <div class="p-3 bg-primary text-white">Item 1</div>
  <div class="p-3 bg-secondary text-white">Item 2</div>
</div>
```
üìå **Effect:** Items will be placed **side by side**.

---

## **2Ô∏è‚É£ Direction (`flex-direction`)**
Controls the **main axis** of flex items.

| Class | CSS Equivalent | Effect |
|-------|---------------|--------|
| `flex-row` | `flex-direction: row;` | Default (left to right) |
| `flex-row-reverse` | `flex-direction: row-reverse;` | Reverse row order |
| `flex-column` | `flex-direction: column;` | Stack items vertically |
| `flex-column-reverse` | `flex-direction: column-reverse;` | Reverse column order |

‚úÖ **Example: Vertical Layout (`flex-column`)**
```html
<div class="d-flex flex-column">
  <div class="p-3 bg-primary text-white">Item 1</div>
  <div class="p-3 bg-secondary text-white">Item 2</div>
</div>
```

---

## **3Ô∏è‚É£ Justify Content (`justify-content-`)**
Controls **horizontal alignment** (main axis).

| Class | CSS Equivalent | Effect |
|-------|---------------|--------|
| `justify-content-start` | `justify-content: flex-start;` | Left-aligned (default) |
| `justify-content-center` | `justify-content: center;` | Center-aligned |
| `justify-content-end` | `justify-content: flex-end;` | Right-aligned |
| `justify-content-between` | `justify-content: space-between;` | Equal space between items |
| `justify-content-around` | `justify-content: space-around;` | Space around items |
| `justify-content-evenly` | `justify-content: space-evenly;` | Equal spacing around |

‚úÖ **Example: Centered Items**
```html
<div class="d-flex justify-content-center">
  <div class="p-3 bg-primary text-white">Item 1</div>
  <div class="p-3 bg-secondary text-white">Item 2</div>
</div>
```

---

## **4Ô∏è‚É£ Align Items (`align-items-`)**
Controls **vertical alignment** (cross-axis).

| Class | CSS Equivalent | Effect |
|-------|---------------|--------|
| `align-items-start` | `align-items: flex-start;` | Align at top |
| `align-items-center` | `align-items: center;` | Align at center |
| `align-items-end` | `align-items: flex-end;` | Align at bottom |
| `align-items-baseline` | `align-items: baseline;` | Align by text baseline |
| `align-items-stretch` | `align-items: stretch;` | Default: stretch items |

‚úÖ **Example: Centered Items Vertically**
```html
<div class="d-flex align-items-center" style="height: 200px; background: lightgray;">
  <div class="p-3 bg-primary text-white">Item 1</div>
  <div class="p-3 bg-secondary text-white">Item 2</div>
</div>
```

---

## **5Ô∏è‚É£ Align Self (`align-self-`)**
Controls **alignment of individual items**.

| Class | CSS Equivalent | Effect |
|-------|---------------|--------|
| `align-self-start` | `align-self: flex-start;` | Align at top |
| `align-self-center` | `align-self: center;` | Align at center |
| `align-self-end` | `align-self: flex-end;` | Align at bottom |

‚úÖ **Example: One Item Moved to Bottom**
```html
<div class="d-flex">
  <div class="p-3 bg-primary text-white">Item 1</div>
  <div class="p-3 bg-secondary text-white align-self-end">Item 2</div>
</div>
```

---

## **6Ô∏è‚É£ Wrap Items (`flex-wrap-`)**
Controls whether items **wrap or stay in one line**.

| Class | CSS Equivalent | Effect |
|-------|---------------|--------|
| `flex-nowrap` | `flex-wrap: nowrap;` | Items stay in one line |
| `flex-wrap` | `flex-wrap: wrap;` | Items wrap to next line |
| `flex-wrap-reverse` | `flex-wrap: wrap-reverse;` | Items wrap in reverse order |

‚úÖ **Example: Wrap Items on Small Screens**
```html
<div class="d-flex flex-wrap">
  <div class="p-3 bg-primary text-white">Item 1</div>
  <div class="p-3 bg-secondary text-white">Item 2</div>
  <div class="p-3 bg-success text-white">Item 3</div>
</div>
```

---

## **7Ô∏è‚É£ Grow & Shrink (`flex-grow-*` & `flex-shrink-*`)**
- **Grow (`flex-grow-1`)**: Item expands to fill available space.
- **Shrink (`flex-shrink-1`)**: Item shrinks when necessary.

‚úÖ **Example: Make One Item Grow**
```html
<div class="d-flex">
  <div class="p-3 bg-primary text-white flex-grow-1">Grow</div>
  <div class="p-3 bg-secondary text-white">Fixed</div>
</div>
```

---

## **üìå Full List of Bootstrap Flex Utilities**
| Class | Property |
|-------|----------|
| `d-flex` | `display: flex;` |
| `flex-row` | `flex-direction: row;` |
| `flex-column` | `flex-direction: column;` |
| `justify-content-center` | `justify-content: center;` |
| `align-items-center` | `align-items: center;` |
| `flex-wrap` | `flex-wrap: wrap;` |
| `flex-grow-1` | `flex-grow: 1;` |
| `flex-shrink-1` | `flex-shrink: 1;` |

---

### **üîπ Summary**
1. **`d-flex`** ‚Üí Enables flexbox.
2. **`flex-row | flex-column`** ‚Üí Controls direction.
3. **`justify-content-*`** ‚Üí Controls horizontal alignment.
4. **`align-items-*`** ‚Üí Controls vertical alignment.
5. **`align-self-*`** ‚Üí Aligns specific items.
6. **`flex-wrap-*`** ‚Üí Controls wrapping.
7. **`flex-grow-1` & `flex-shrink-1`** ‚Üí Controls item sizing.

Would you like a specific example or need help applying it in your project? üöÄ

















### **üìå Text Alignment in Bootstrap (`text-*` Classes)**  

Bootstrap provides utility classes for **text alignment** that allow you to align text **left, center, right, justified**, or even responsive based on screen size.

---

## **1Ô∏è‚É£ Basic Text Alignment**
| Class | Effect |
|-------|--------|
| `text-start` | Aligns text to the **left** (default for LTR) |
| `text-center` | Aligns text to the **center** |
| `text-end` | Aligns text to the **right** |

‚úÖ **Example Usage:**
```html
<p class="text-start">Left-aligned text</p>
<p class="text-center">Center-aligned text</p>
<p class="text-end">Right-aligned text</p>
```

---

## **2Ô∏è‚É£ Responsive Text Alignment**
Bootstrap allows responsive alignment based on screen size:

| Class | Extra Small (XS) | Small (SM) | Medium (MD) | Large (LG) | Extra Large (XL) |
|-------|-----------------|------------|-------------|------------|-----------------|
| `text-sm-start` | Left | Left | Left | Left | Left |
| `text-md-center` | Left | Left | Center | Center | Center |
| `text-lg-end` | Left | Left | Left | Right | Right |

‚úÖ **Example Usage:**
```html
<p class="text-sm-start text-md-center text-lg-end">
  This text is left-aligned on small screens, center-aligned on medium screens, and right-aligned on large screens.
</p>
```

---

## **3Ô∏è‚É£ Justified Text (`text-justify`)**
Bootstrap **does not** provide a built-in `text-justify` class in v5, but you can use **CSS**:
```css
.text-justify {
  text-align: justify;
}
```
‚úÖ **Example Usage:**
```html
<p class="text-justify">
  This text will be justified, meaning it will be aligned on both the left and right sides.
</p>
```

---

## **4Ô∏è‚É£ Wrapping & No Wrapping**
| Class | Effect |
|-------|--------|
| `text-wrap` | Allows text to wrap normally |
| `text-nowrap` | Prevents text from wrapping (forces a single line) |

‚úÖ **Example: Prevent Wrapping (`text-nowrap`)**
```html
<p class="text-nowrap">This is a long text that will stay on one line and not wrap.</p>
```

---

## **5Ô∏è‚É£ Word Break & Overflow Handling**
| Class | Effect |
|-------|--------|
| `text-break` | Breaks long words at any point to prevent overflow |

‚úÖ **Example: Break Long Words (`text-break`)**
```html
<p class="text-break">ThisIsAVeryLongWordThatWouldOverflowTheContainerButNowItBreaks</p>
```

---

## **üîπ Summary of Bootstrap Text Alignment**
| Class | Effect |
|-------|--------|
| `text-start` | Aligns text to the left |
| `text-center` | Aligns text to the center |
| `text-end` | Aligns text to the right |
| `text-sm-start`, `text-md-center`, `text-lg-end` | Responsive alignment |
| `text-wrap` | Allows text to wrap |
| `text-nowrap` | Prevents text from wrapping |
| `text-break` | Breaks long words to avoid overflow |

---

Would you like more examples or help with a specific alignment issue? üöÄ



































### **üìå Font Sizes in Bootstrap (`fs-*` Classes)**  

Bootstrap provides utility classes for **font sizing** using `fs-` classes.

---

## **1Ô∏è‚É£ Font Size Classes (`fs-*`)**
| Class | Font Size (rem) | Font Size (px) |
|-------|----------------|---------------|
| `fs-1` | `2.5rem` | `40px` |
| `fs-2` | `2rem` | `32px` |
| `fs-3` | `1.75rem` | `28px` |
| `fs-4` | `1.5rem` | `24px` |
| `fs-5` | `1.25rem` | `20px` |
| `fs-6` | `1rem` | `16px` |

‚úÖ **Example Usage:**
```html
<p class="fs-1">This is fs-1 (40px)</p>
<p class="fs-2">This is fs-2 (32px)</p>
<p class="fs-3">This is fs-3 (28px)</p>
<p class="fs-4">This is fs-4 (24px)</p>
<p class="fs-5">This is fs-5 (20px)</p>
<p class="fs-6">This is fs-6 (16px)</p>
```

---

## **2Ô∏è‚É£ Responsive Font Sizes**
You can make font sizes responsive using Bootstrap's breakpoints:

| Class | XS | SM | MD | LG | XL |
|-------|----|----|----|----|----|
| `fs-sm-1` | 40px | 40px | 40px | 40px | 40px |
| `fs-md-2` | 16px | 32px | 32px | 32px | 32px |

‚úÖ **Example Usage:**
```html
<p class="fs-sm-6 fs-md-4 fs-lg-2">This text changes size based on screen width.</p>
```

---

### **üîπ Summary of Bootstrap Font Sizes**
- `fs-1` ‚Üí 40px  
- `fs-2` ‚Üí 32px  
- `fs-3` ‚Üí 28px  
- `fs-4` ‚Üí 24px  
- `fs-5` ‚Üí 20px  
- `fs-6` ‚Üí 16px  

Would you like more details or custom font size options? üöÄ

























### **üìå Background and Text Color in Bootstrap**

Bootstrap provides **background color** and **text color** utilities to easily style elements. You can also create **custom colors**.

---

## **1Ô∏è‚É£ Background Colors**
Bootstrap includes built-in background color utilities:

| Class | Background Color |
|-------|------------------|
| `bg-primary` | Blue (primary) |
| `bg-secondary` | Grey (secondary) |
| `bg-success` | Green |
| `bg-danger` | Red |
| `bg-warning` | Yellow |
| `bg-info` | Light Blue |
| `bg-light` | Light Grey |
| `bg-dark` | Dark |
| `bg-body` | Background color based on the theme (body color) |
| `bg-white` | White |
| `bg-transparent` | Transparent |

‚úÖ **Example Usage:**
```html
<div class="bg-primary text-white p-3">This div has a primary background color and white text</div>
<div class="bg-light text-dark p-3">This div has a light background color and dark text</div>
```

---

## **2Ô∏è‚É£ Text Colors**
Bootstrap also provides utility classes for **text color**:

| Class | Text Color |
|-------|------------|
| `text-primary` | Blue (primary) |
| `text-secondary` | Grey (secondary) |
| `text-success` | Green |
| `text-danger` | Red |
| `text-warning` | Yellow |
| `text-info` | Light Blue |
| `text-light` | Light Grey |
| `text-dark` | Dark |
| `text-body` | Default body text color |
| `text-white` | White |
| `text-muted` | Muted (light grey) |
| `text-black-50` | Black with 50% opacity |
| `text-white-50` | White with 50% opacity |

‚úÖ **Example Usage:**
```html
<p class="text-primary">This text is blue (primary)</p>
<p class="text-danger">This text is red (danger)</p>
<p class="text-muted">This text is muted (light grey)</p>
```

---

## **3Ô∏è‚É£ Custom Colors**
You can define custom background and text colors using **inline CSS** or through your **CSS files**.

### **Custom Background Color:**
```html
<div class="p-3" style="background-color: #ff6347;">Custom background color (Tomato)</div>
```

### **Custom Text Color:**
```html
<p style="color: #ff6347;">Custom text color (Tomato)</p>
```

Alternatively, you can add custom CSS for more flexibility.

### **Example of Custom CSS:**
```css
.custom-bg {
  background-color: #ff6347; /* Tomato */
}
.custom-text {
  color: #ff6347; /* Tomato */
}
```
Then, use it in your HTML:
```html
<div class="custom-bg custom-text p-3">This has custom background and text color</div>
```

---

## **4Ô∏è‚É£ Responsive Background and Text Colors**
You can apply different background and text colors based on the screen size.

| Class | XS | SM | MD | LG | XL |
|-------|----|----|----|----|----|
| `bg-sm-primary` | Blue on small screens | Blue on small screens | Blue on medium screens | Blue on large screens | Blue on extra large screens |
| `text-md-success` | Green on medium screens | Green on medium screens | Green on medium screens | Green on large screens | Green on extra large screens |

‚úÖ **Example Usage:**
```html
<div class="bg-sm-primary text-md-success p-3">
  Background color changes based on screen size.
</div>
```

---

### **üîπ Summary of Bootstrap Color Utilities**
- **Background Colors:**
  - `bg-primary`, `bg-success`, `bg-danger`, `bg-light`, etc.
- **Text Colors:**
  - `text-primary`, `text-success`, `text-danger`, `text-light`, etc.
- **Custom Colors:** 
  - Use `style="background-color: #yourColor"` or define custom CSS classes.
- **Responsive Colors:** 
  - Use classes like `bg-sm-primary`, `text-md-success` to change based on screen size.

Would you like more examples or help with custom styling in your project? üöÄ




























### **üìå Bootstrap Positioning Classes**

Bootstrap provides a set of **positioning utility classes** to control the positioning of elements within the layout.

---

## **1Ô∏è‚É£ Positioning Types**
Bootstrap offers five basic positioning options:

| Class | Description |
|-------|-------------|
| `position-static` | Default position (elements are positioned based on normal flow) |
| `position-relative` | Positioned relative to its normal position |
| `position-absolute` | Positioned relative to the nearest positioned ancestor (not static) |
| `position-fixed` | Positioned relative to the viewport (fixed on scroll) |
| `position-sticky` | Positioned based on the scroll position, sticks to the screen when scrolling |

---

## **2Ô∏è‚É£ Positioning Classes and Example Usage**

### **`position-static` (default)**
This is the default positioning type and doesn't require an explicit class since it's the default behavior for elements.

```html
<div class="position-static">This is statically positioned (default).</div>
```

---

### **`position-relative`**
Positions an element relative to its **normal** position (it allows you to adjust its position using `top`, `right`, `bottom`, or `left`).

‚úÖ **Example:**
```html
<div class="position-relative" style="top: 10px; left: 20px;">
  This element is positioned relative to its normal position.
</div>
```

---

### **`position-absolute`**
This positions an element **absolute** relative to its nearest positioned ancestor (an ancestor with `relative`, `absolute`, or `fixed`).

‚úÖ **Example:**
```html
<div class="position-relative" style="height: 200px;">
  <div class="position-absolute" style="top: 10px; left: 10px;">
    This is positioned absolutely inside a relative container.
  </div>
</div>
```

---

### **`position-fixed`**
This positions an element **fixed** to the **viewport**. It will stay in the same place even when the page is scrolled.

‚úÖ **Example:**
```html
<div class="position-fixed" style="top: 0; right: 0; background-color: yellow;">
  This element is fixed to the top-right of the viewport.
</div>
```

---

### **`position-sticky`**
This positions an element **relative to the scroll position**. It behaves like `relative` until a specified point, after which it sticks to that point.

‚úÖ **Example:**
```html
<div class="position-sticky" style="top: 10px;">
  This element will stick to the top of the viewport when scrolling.
</div>
```

---

## **3Ô∏è‚É£ Advanced Positioning with Offsets**
You can combine `top`, `right`, `bottom`, and `left` with positioning classes to adjust the position of an element.

- **Offsets** are used for fine-tuning position after setting the class (e.g., `top`, `left`).

| Class | Example |
|-------|---------|
| `top-0`, `top-50`, `top-100` | Adjusts `top` position (0%, 50%, 100%) |
| `start-0`, `end-0` | Adjusts horizontal position (left or right) |
| `bottom-0` | Adjusts `bottom` position |

---

## **4Ô∏è‚É£ Summary of Positioning Classes**
- `position-static`: Default (no positioning)
- `position-relative`: Positioned relative to its normal position
- `position-absolute`: Positioned relative to the nearest positioned ancestor
- `position-fixed`: Positioned relative to the viewport (fixed during scroll)
- `position-sticky`: Positioned relative to the viewport, but sticks during scrolling

You can also use **position offsets** to control the exact positioning.

---







This is a **Bootstrap modal** implementation:  

- The **button** (`btn-primary`) triggers the modal using `data-bs-toggle="modal"` and `data-bs-target="#exampleModal"`.  
- The **modal** (`div.modal`) appears when triggered, containing:  
  - **Header** (`modal-header`) with a title and close button.  
  - **Body** (`modal-body`) for content.  
  - **Footer** (`modal-footer`) with "Close" and "Save changes" buttons.  
- The modal is dismissed using `data-bs-dismiss="modal"`.  

This allows users to display pop-up content dynamically. üöÄ






<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
  Launch demo modal
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Modal title</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        ...
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Save changes</button>
      </div>
    </div>
  </div>
</div>