/* Base styles for the card layout */
body {
    margin: 0;
    font-family: Arial, sans-serif;
}

.card-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr); /* 3-column layout */
    gap: 15px;
    padding: 20px;
}

.card {
    background-color: #4CAF50;
    color: white;
    padding: 20px;
    text-align: center;
    border-radius: 5px;
}

@media (max-width: 768px) {
    .card-container {
        grid-template-columns: repeat(2, 1fr); /* 2-column layout */
    }
}

@media (max-width: 480px) {
    .card-container {
        grid-template-columns: 1fr; /* 1-column layout */
    }
}




Why is Responsive Design Important?
Imagine visiting a website on your phone, and the text looks like tiny ants marching across the screen, while the buttons are so giant they take up half the screen! You end up zooming in, zooming out, and struggling to click the right thing. Frustrating, right? That’s exactly what happens if a website isn’t responsive.

Here’s why responsive design matters:

More people browse on phones and tablets than desktops. If your website doesn’t fit their screen, they’ll leave quickly.

A responsive website makes sure that everything looks good—no matter the device. It keeps users happy and engaged.

1. Meta Tags: The First Step in Responsive Design
Meta tags tell the browser how to display your website correctly on various devices. Without them, your site might appear zoomed out or squished, and users will have to pinch and zoom to interact with it.

Example of the Meta Tag for Responsive Design:
<meta name="viewport" content="width=device-width, initial-scale=1.0">
Explanation:
name="viewport": Targets the visible area of the screen.

width=device-width: Makes sure the content fits the screen’s width.

initial-scale=1.0: Ensures the page is shown at normal size, without zooming in or out.

 

2. Media Queries: Customizing Styles for Every Screen
Media queries allow you to adjust your site’s layout and styles for different screen sizes. For example, on a phone, you might want the menu hidden, while on a desktop, it can stay visible.

Basic Media Query Example:
@media (max-width: 768px) {
    body {
        background-color: lightgray;
    }
}
This code changes the background color to light gray if the screen is 768px wide or smaller (like on a tablet).

More Media Query Examples:
For Phones (Up to 480px):

@media (max-width: 480px) {
    body {
        font-size: 14px;
    }
}
 

For Tablets (Up to 768px):

@media (max-width: 768px) {
    .menu {
        display: none;
    }
}
 

For Desktops (Above 1024px):

@media (min-width: 1024px) {
    .sidebar {
        display: block;
    }
}
Best Practices for Responsive Design
Use the Meta Viewport Tag:
This ensures your site adjusts to all screen sizes.

Choose the Right Breakpoints:

480px for phones

768px for tablets

1024px and above for desktops

Flexible Layouts:
Use percentages or fr units so your layout adjusts smoothly.

Test on Different Devices:
Make sure your site works well on both portrait and landscape modes across various devices.